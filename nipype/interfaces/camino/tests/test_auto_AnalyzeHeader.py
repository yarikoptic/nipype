# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.camino.convert import AnalyzeHeader
def test_AnalyzeHeader_inputs():
    input_map = dict(scaleinter=dict(units='NA',
    argstr='-scaleinter %d',
    ),
    printintelbyteorder=dict(position=3,
    argstr='-printintelbyteorder %s',
    ),
    data_dims=dict(units='voxels',
    argstr='-datadims %s',
    ),
    centre=dict(units='mm',
    argstr='-centre %s',
    ),
    scaleslope=dict(units='NA',
    argstr='-scaleslope %d',
    ),
    scheme_file=dict(position=2,
    argstr='%s',
    ),
    in_file=dict(position=1,
    mandatory=True,
    argstr='< %s',
    ),
    intelbyteorder=dict(argstr='-intelbyteorder',
    ),
    nimages=dict(units='NA',
    argstr='-nimages %d',
    ),
    voxel_dims=dict(units='mm',
    argstr='-voxeldims %s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    description=dict(argstr='-description %s',
    ),
    printprogargs=dict(position=3,
    argstr='-printprogargs %s',
    ),
    args=dict(argstr='%s',
    ),
    readheader=dict(position=3,
    argstr='-readheader %s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    offset=dict(units='NA',
    argstr='-offset %d',
    ),
    printbigendian=dict(position=3,
    argstr='-printbigendian %s',
    ),
    picoseed=dict(units='mm',
    argstr='-picoseed %s',
    ),
    initfromheader=dict(position=3,
    argstr='-initfromheader %s',
    ),
    out_file=dict(position=-1,
    genfile=True,
    argstr='> %s',
    ),
    datatype=dict(mandatory=True,
    argstr='-datatype %s',
    ),
    networkbyteorder=dict(argstr='-networkbyteorder',
    ),
    greylevels=dict(units='NA',
    argstr='-gl %s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    printimagedims=dict(position=3,
    argstr='-printimagedims %s',
    ),
    )
    inputs = AnalyzeHeader.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_AnalyzeHeader_outputs():
    output_map = dict(header=dict(),
    )
    outputs = AnalyzeHeader.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
