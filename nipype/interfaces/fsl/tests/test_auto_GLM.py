# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.fsl.model import GLM
def test_GLM_inputs():
    input_map = dict(out_sigsq_name=dict(argstr='--out_sigsq=%s',
    ),
    dof=dict(argstr='--dof=%d',
    ),
    out_pf_name=dict(argstr='--out_pf=%s',
    ),
    out_t_name=dict(argstr='--out_t=%s',
    ),
    out_cope=dict(argstr='--out_cope=%s',
    ),
    design=dict(position=2,
    mandatory=True,
    argstr='-d %s',
    ),
    mask=dict(argstr='-m %s',
    ),
    out_res_name=dict(argstr='--out_res=%s',
    ),
    in_file=dict(position=1,
    mandatory=True,
    argstr='-i %s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    out_vnscales_name=dict(argstr='--out_vnscales=%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    out_varcb_name=dict(argstr='--out_varcb=%s',
    ),
    args=dict(argstr='%s',
    ),
    out_z_name=dict(argstr='--out_z=%s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    var_norm=dict(argstr='--vn',
    ),
    out_f_name=dict(argstr='--out_f=%s',
    ),
    out_data_name=dict(argstr='--out_data=%s',
    ),
    contrasts=dict(argstr='-c %s',
    ),
    out_file=dict(name_source='in_file',
    keep_extension=True,
    position=3,
    name_template='%s_glm',
    argstr='-o %s',
    ),
    dat_norm=dict(argstr='--dat_norm',
    ),
    demean=dict(argstr='--demean',
    ),
    output_type=dict(),
    des_norm=dict(argstr='--des_norm',
    ),
    out_p_name=dict(argstr='--out_p=%s',
    ),
    )
    inputs = GLM.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_GLM_outputs():
    output_map = dict(out_res=dict(),
    out_varcb=dict(),
    out_f=dict(),
    out_file=dict(),
    out_vnscales=dict(),
    out_cope=dict(),
    out_sigsq=dict(),
    out_t=dict(),
    out_pf=dict(),
    out_p=dict(),
    out_data=dict(),
    out_z=dict(),
    )
    outputs = GLM.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
