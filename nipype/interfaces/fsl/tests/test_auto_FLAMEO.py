# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.fsl.model import FLAMEO
def test_FLAMEO_inputs():
    input_map = dict(sample_every=dict(argstr='--sampleevery=%d',
    ),
    cope_file=dict(mandatory=True,
    argstr='--copefile=%s',
    ),
    cov_split_file=dict(mandatory=True,
    argstr='--covsplitfile=%s',
    ),
    n_jumps=dict(argstr='--njumps=%d',
    ),
    burnin=dict(argstr='--burnin=%d',
    ),
    design_file=dict(mandatory=True,
    argstr='--designfile=%s',
    ),
    no_pe_outputs=dict(argstr='--nopeoutput',
    ),
    log_dir=dict(usedefault=True,
    argstr='--ld=%s',
    ),
    run_mode=dict(mandatory=True,
    argstr='--runmode=%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    f_con_file=dict(argstr='--fcontrastsfile=%s',
    ),
    args=dict(argstr='%s',
    ),
    t_con_file=dict(mandatory=True,
    argstr='--tcontrastsfile=%s',
    ),
    dof_var_cope_file=dict(argstr='--dofvarcopefile=%s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    var_cope_file=dict(argstr='--varcopefile=%s',
    ),
    fix_mean=dict(argstr='--fixmean',
    ),
    sigma_dofs=dict(argstr='--sigma_dofs=%d',
    ),
    outlier_iter=dict(argstr='--ioni=%d',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    mask_file=dict(mandatory=True,
    argstr='--maskfile=%s',
    ),
    output_type=dict(),
    infer_outliers=dict(argstr='--inferoutliers',
    ),
    )
    inputs = FLAMEO.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_FLAMEO_outputs():
    output_map = dict(mrefvars=dict(),
    tstats=dict(),
    pes=dict(),
    stats_dir=dict(),
    zstats=dict(),
    weights=dict(),
    tdof=dict(),
    var_copes=dict(),
    copes=dict(),
    fstats=dict(),
    zfstats=dict(),
    res4d=dict(),
    )
    outputs = FLAMEO.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
