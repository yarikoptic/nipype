# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.ants.registration import Registration
def test_Registration_inputs():
    input_map = dict(convergence_window_size=dict(requires=['convergence_threshold'],
    usedefault=True,
    ),
    metric_item_trait=dict(),
    metric_weight_item_trait=dict(),
    output_inverse_warped_image=dict(requires=['output_warped_image'],
    hash_files=False,
    ),
    metric_stage_trait=dict(),
    metric=dict(mandatory=True,
    ),
    sampling_percentage_item_trait=dict(),
    moving_image=dict(mandatory=True,
    ),
    initial_moving_transform=dict(xor=['initial_moving_transform_com'],
    argstr='%s',
    ),
    sampling_percentage_stage_trait=dict(),
    radius_bins_item_trait=dict(),
    transforms=dict(mandatory=True,
    argstr='%s',
    ),
    initial_moving_transform_com=dict(xor=['initial_moving_transform'],
    argstr='%s',
    ),
    metric_weight=dict(mandatory=True,
    usedefault=True,
    requires=['metric'],
    ),
    dimension=dict(usedefault=True,
    argstr='--dimensionality %d',
    ),
    sigma_units=dict(requires=['smoothing_sigmas'],
    ),
    invert_initial_moving_transform=dict(xor=['initial_moving_transform_com'],
    requires=['initial_moving_transform'],
    ),
    winsorize_lower_quantile=dict(argstr='%s',
    usedefault=True,
    ),
    sampling_strategy_item_trait=dict(),
    convergence_threshold=dict(requires=['number_of_iterations'],
    usedefault=True,
    ),
    sampling_strategy=dict(requires=['metric_weight'],
    ),
    shrink_factors=dict(mandatory=True,
    ),
    winsorize_upper_quantile=dict(argstr='%s',
    usedefault=True,
    ),
    fixed_image=dict(mandatory=True,
    ),
    output_transform_prefix=dict(argstr='%s',
    usedefault=True,
    ),
    interpolation=dict(usedefault=True,
    argstr='%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    radius_bins_stage_trait=dict(),
    args=dict(argstr='%s',
    ),
    use_estimate_learning_rate_once=dict(),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    metric_weight_stage_trait=dict(),
    write_composite_transform=dict(argstr='--write-composite-transform %d',
    usedefault=True,
    ),
    moving_image_mask=dict(requires=['fixed_image_mask'],
    ),
    num_threads=dict(nohash=True,
    usedefault=True,
    ),
    output_warped_image=dict(hash_files=False,
    ),
    sampling_percentage=dict(requires=['sampling_strategy'],
    ),
    number_of_iterations=dict(),
    fixed_image_mask=dict(argstr='%s',
    ),
    radius_or_number_of_bins=dict(requires=['metric_weight'],
    usedefault=True,
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    smoothing_sigmas=dict(mandatory=True,
    ),
    use_histogram_matching=dict(usedefault=True,
    ),
    transform_parameters=dict(),
    collapse_linear_transforms_to_fixed_image_header=dict(argstr='%s',
    usedefault=True,
    ),
    sampling_strategy_stage_trait=dict(),
    collapse_output_transforms=dict(argstr='--collapse-output-transforms %d',
    usedefault=True,
    ),
    )
    inputs = Registration.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_Registration_outputs():
    output_map = dict(reverse_invert_flags=dict(),
    inverse_composite_transform=dict(),
    warped_image=dict(),
    inverse_warped_image=dict(),
    forward_invert_flags=dict(),
    reverse_transforms=dict(),
    composite_transform=dict(),
    forward_transforms=dict(),
    )
    outputs = Registration.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
