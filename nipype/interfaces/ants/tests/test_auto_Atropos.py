# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.ants.segmentation import Atropos
def test_Atropos_inputs():
    input_map = dict(icm_use_synchronous_update=dict(argstr='%s',
    ),
    prior_probability_images=dict(),
    intensity_images=dict(mandatory=True,
    argstr='--intensity-image %s...',
    ),
    prior_weighting=dict(),
    out_classified_image_name=dict(hash_files=False,
    genfile=True,
    argstr='%s',
    ),
    mrf_smoothing_factor=dict(argstr='%s',
    ),
    convergence_threshold=dict(requires=['n_iterations'],
    ),
    prior_probability_threshold=dict(requires=['prior_weighting'],
    ),
    save_posteriors=dict(),
    maximum_number_of_icm_terations=dict(requires=['icm_use_synchronous_update'],
    ),
    use_mixture_model_proportions=dict(requires=['posterior_formulation'],
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    mask_image=dict(mandatory=True,
    argstr='--mask-image %s',
    ),
    mrf_radius=dict(requires=['mrf_smoothing_factor'],
    ),
    initialization=dict(mandatory=True,
    requires=['number_of_tissue_classes'],
    argstr='%s',
    ),
    args=dict(argstr='%s',
    ),
    likelihood_model=dict(argstr='--likelihood-model %s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    output_posteriors_name_template=dict(usedefault=True,
    ),
    num_threads=dict(nohash=True,
    usedefault=True,
    ),
    number_of_tissue_classes=dict(mandatory=True,
    ),
    n_iterations=dict(argstr='%s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    posterior_formulation=dict(argstr='%s',
    ),
    dimension=dict(usedefault=True,
    argstr='--image-dimensionality %d',
    ),
    )
    inputs = Atropos.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_Atropos_outputs():
    output_map = dict(posteriors=dict(),
    classified_image=dict(),
    )
    outputs = Atropos.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
