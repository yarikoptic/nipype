# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.freesurfer.preprocess import ApplyVolTransform
def test_ApplyVolTransform_inputs():
    input_map = dict(no_ded_m3z_path=dict(requires=['m3z_file'],
    argstr='--noDefM3zPath',
    ),
    reg_file=dict(xor=('reg_file', 'fsl_reg_file', 'xfm_reg_file', 'reg_header', 'subject'),
    mandatory=True,
    argstr='--reg %s',
    ),
    interp=dict(argstr='--interp %s',
    ),
    source_file=dict(copyfile=False,
    mandatory=True,
    argstr='--mov %s',
    ),
    fs_target=dict(xor=('target_file', 'tal', 'fs_target'),
    mandatory=True,
    requires=['reg_file'],
    argstr='--fstarg',
    ),
    tal=dict(xor=('target_file', 'tal', 'fs_target'),
    mandatory=True,
    argstr='--tal',
    ),
    no_resample=dict(argstr='--no-resample',
    ),
    subject=dict(xor=('reg_file', 'fsl_reg_file', 'xfm_reg_file', 'reg_header', 'subject'),
    mandatory=True,
    argstr='--s %s',
    ),
    inverse=dict(argstr='--inv',
    ),
    invert_morph=dict(requires=['m3z_file'],
    argstr='--inv-morph',
    ),
    reg_header=dict(xor=('reg_file', 'fsl_reg_file', 'xfm_reg_file', 'reg_header', 'subject'),
    mandatory=True,
    argstr='--regheader',
    ),
    xfm_reg_file=dict(xor=('reg_file', 'fsl_reg_file', 'xfm_reg_file', 'reg_header', 'subject'),
    mandatory=True,
    argstr='--xfm %s',
    ),
    m3z_file=dict(argstr='--m3z %s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    args=dict(argstr='%s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    subjects_dir=dict(),
    fsl_reg_file=dict(xor=('reg_file', 'fsl_reg_file', 'xfm_reg_file', 'reg_header', 'subject'),
    mandatory=True,
    argstr='--fsl %s',
    ),
    target_file=dict(xor=('target_file', 'tal', 'fs_target'),
    mandatory=True,
    argstr='--targ %s',
    ),
    transformed_file=dict(genfile=True,
    argstr='--o %s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    tal_resolution=dict(argstr='--talres %.10f',
    ),
    )
    inputs = ApplyVolTransform.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_ApplyVolTransform_outputs():
    output_map = dict(transformed_file=dict(),
    )
    outputs = ApplyVolTransform.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
