# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.freesurfer.preprocess import MRIConvert
def test_MRIConvert_inputs():
    input_map = dict(conform_min=dict(argstr='--conform_min',
    ),
    no_change=dict(argstr='--nochange',
    ),
    no_scale=dict(argstr='--no_scale 1',
    ),
    force_ras=dict(argstr='--force_ras_good',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    fwhm=dict(argstr='--fwhm %f',
    ),
    in_like=dict(argstr='--in_like %s',
    ),
    conform=dict(argstr='--conform',
    ),
    args=dict(argstr='%s',
    ),
    in_center=dict(argstr='--in_center %s',
    ),
    devolve_transform=dict(argstr='--devolvexfm %s',
    ),
    no_translate=dict(argstr='--no_translate',
    ),
    zero_ge_z_offset=dict(argstr='--zero_ge_z_offset',
    ),
    out_j_count=dict(argstr='--out_j_count %d',
    ),
    color_file=dict(argstr='--color_file %s',
    ),
    apply_transform=dict(argstr='--apply_transform %s',
    ),
    in_info=dict(argstr='--in_info',
    ),
    out_i_dir=dict(argstr='--out_i_direction %f %f %f',
    ),
    resample_type=dict(argstr='--resample_type %s',
    ),
    unwarp_gradient=dict(argstr='--unwarp_gradient_nonlinearity',
    ),
    out_k_size=dict(argstr='--out_k_size %d',
    ),
    subject_name=dict(argstr='--subject_name %s',
    ),
    drop_n=dict(argstr='--ndrop %d',
    ),
    in_j_size=dict(argstr='--in_j_size %d',
    ),
    slice_bias=dict(argstr='--slice-bias %f',
    ),
    out_orientation=dict(argstr='--out_orientation %s',
    ),
    slice_crop=dict(argstr='--slice-crop %d %d',
    ),
    conform_size=dict(argstr='--conform_size %s',
    ),
    out_i_count=dict(argstr='--out_i_count %d',
    ),
    ascii=dict(argstr='--ascii',
    ),
    out_center=dict(argstr='--out_center %f %f %f',
    ),
    slice_reverse=dict(argstr='--slice-reverse',
    ),
    zero_outlines=dict(argstr='--zero_outlines',
    ),
    in_j_dir=dict(argstr='--in_j_direction %f %f %f',
    ),
    out_k_dir=dict(argstr='--out_k_direction %f %f %f',
    ),
    template_type=dict(argstr='--template_type %s',
    ),
    split=dict(argstr='--split',
    ),
    crop_gdf=dict(argstr='--crop_gdf',
    ),
    in_i_dir=dict(argstr='--in_i_direction %f %f %f',
    ),
    cut_ends=dict(argstr='--cutends %d',
    ),
    crop_size=dict(argstr='--cropsize %d %d %d',
    ),
    frame=dict(argstr='--frame %d',
    ),
    reorder=dict(argstr='--reorder %d %d %d',
    ),
    in_file=dict(position=-2,
    mandatory=True,
    argstr='--input_volume %s',
    ),
    skip_n=dict(argstr='--nskip %d',
    ),
    midframe=dict(argstr='--mid-frame',
    ),
    fill_parcellation=dict(argstr='--fill_parcellation',
    ),
    out_info=dict(argstr='--out_info',
    ),
    in_stats=dict(argstr='--in_stats',
    ),
    in_matrix=dict(argstr='--in_matrix',
    ),
    out_type=dict(argstr='--out_type %s',
    ),
    out_k_count=dict(argstr='--out_k_count %d',
    ),
    in_scale=dict(argstr='--scale %f',
    ),
    out_matrix=dict(argstr='--out_matrix',
    ),
    read_only=dict(argstr='--read_only',
    ),
    template_info=dict(),
    out_scale=dict(argstr='--out-scale %d',
    ),
    subjects_dir=dict(),
    status_file=dict(argstr='--status %s',
    ),
    crop_center=dict(argstr='--crop %d %d %d',
    ),
    invert_contrast=dict(argstr='--invert_contrast %f',
    ),
    parse_only=dict(argstr='--parse_only',
    ),
    vox_size=dict(argstr='-voxsize %f %f %f',
    ),
    apply_inv_transform=dict(argstr='--apply_inverse_transform %s',
    ),
    out_j_dir=dict(argstr='--out_j_direction %f %f %f',
    ),
    reslice_like=dict(argstr='--reslice_like %s',
    ),
    sphinx=dict(argstr='--sphinx',
    ),
    out_file=dict(position=-1,
    genfile=True,
    argstr='--output_volume %s',
    ),
    in_type=dict(argstr='--in_type %s',
    ),
    out_i_size=dict(argstr='--out_i_size %d',
    ),
    in_k_size=dict(argstr='--in_k_size %d',
    ),
    out_j_size=dict(argstr='--out_j_size %d',
    ),
    in_k_dir=dict(argstr='--in_k_direction %f %f %f',
    ),
    no_write=dict(argstr='--no_write',
    ),
    sdcm_list=dict(argstr='--sdcmlist %s',
    ),
    autoalign_matrix=dict(argstr='--autoalign %s',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    in_i_size=dict(argstr='--in_i_size %d',
    ),
    in_orientation=dict(argstr='--in_orientation %s',
    ),
    out_stats=dict(argstr='--out_stats',
    ),
    frame_subsample=dict(argstr='--fsubsample %d %d %d',
    ),
    smooth_parcellation=dict(argstr='--smooth_parcellation',
    ),
    out_datatype=dict(argstr='--out_data_type %s',
    ),
    )
    inputs = MRIConvert.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_MRIConvert_outputs():
    output_map = dict(out_file=dict(),
    )
    outputs = MRIConvert.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
