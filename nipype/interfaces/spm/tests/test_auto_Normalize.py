# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.spm.preprocess import Normalize
def test_Normalize_inputs():
    input_map = dict(write_interp=dict(field='roptions.interp',
    ),
    use_v8struct=dict(min_ver='8',
    usedefault=True,
    ),
    write_voxel_sizes=dict(field='roptions.vox',
    ),
    write_bounding_box=dict(field='roptions.bb',
    ),
    matlab_cmd=dict(),
    write_wrap=dict(field='roptions.wrap',
    ),
    parameter_file=dict(copyfile=False,
    xor=['source', 'template'],
    field='subj.matname',
    mandatory=True,
    ),
    paths=dict(),
    nonlinear_iterations=dict(field='eoptions.nits',
    ),
    source=dict(copyfile=True,
    xor=['parameter_file'],
    field='subj.source',
    mandatory=True,
    ),
    template=dict(copyfile=False,
    xor=['parameter_file'],
    field='eoptions.template',
    mandatory=True,
    ),
    source_image_smoothing=dict(field='eoptions.smosrc',
    ),
    source_weight=dict(copyfile=False,
    field='subj.wtsrc',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    mfile=dict(usedefault=True,
    ),
    write_preserve=dict(field='roptions.preserve',
    ),
    affine_regularization_type=dict(field='eoptions.regype',
    ),
    out_prefix=dict(field='roptions.prefix',
    usedefault=True,
    ),
    use_mcr=dict(),
    DCT_period_cutoff=dict(field='eoptions.cutoff',
    ),
    nonlinear_regularization=dict(field='eoptions.reg',
    ),
    apply_to_files=dict(copyfile=True,
    field='subj.resample',
    ),
    template_weight=dict(copyfile=False,
    field='eoptions.weight',
    ),
    template_image_smoothing=dict(field='eoptions.smoref',
    ),
    jobtype=dict(usedefault=True,
    ),
    )
    inputs = Normalize.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_Normalize_outputs():
    output_map = dict(normalized_source=dict(),
    normalized_files=dict(),
    normalization_parameters=dict(),
    )
    outputs = Normalize.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
