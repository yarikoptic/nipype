# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.diffusion_toolkit.dti import DTITracker
def test_DTITracker_inputs():
    input_map = dict(mask2_threshold=dict(position=5,
    ),
    input_data_prefix=dict(position=0,
    usedefault=True,
    argstr='%s',
    ),
    mask2_file=dict(position=4,
    argstr='-m2 %s',
    ),
    invert_y=dict(argstr='-iy',
    ),
    invert_x=dict(argstr='-ix',
    ),
    invert_z=dict(argstr='-iz',
    ),
    tensor_file=dict(),
    input_type=dict(argstr='-it %s',
    ),
    mask1_threshold=dict(position=3,
    ),
    output_file=dict(position=1,
    usedefault=True,
    argstr='%s',
    ),
    tracking_method=dict(argstr='-%s',
    ),
    step_length=dict(argstr='-l %f',
    ),
    output_mask=dict(argstr='-om %s',
    ),
    primary_vector=dict(argstr='-%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    random_seed=dict(argstr='-rseed',
    ),
    args=dict(argstr='%s',
    ),
    angle_threshold_weight=dict(argstr='-atw %f',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    mask1_file=dict(position=2,
    mandatory=True,
    argstr='-m %s',
    ),
    angle_threshold=dict(argstr='-at %f',
    ),
    swap_zx=dict(argstr='-szx',
    ),
    swap_xy=dict(argstr='-sxy',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    swap_yz=dict(argstr='-syz',
    ),
    )
    inputs = DTITracker.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_DTITracker_outputs():
    output_map = dict(track_file=dict(),
    mask_file=dict(),
    )
    outputs = DTITracker.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
